import re
import logging
from typing import Dict, List

PII_FIELDS = ("name", "email", "phone", "ssn", "password")


def filter_datum(fields: List[str], redaction: str,
                 message: str, separator: str) -> str:
    """function can be used to anonymize sensitive information in log files"""
    pattern = f"({'|'.join(re.escape(f) for f in fields)})=([^ {separator}]+)"
    message = re.sub(pattern, lambda m: f"{m.group(1)}={redaction}", message)
    return message


class RedactingFormatter(logging.Formatter):
    """Redacting Formatter class"""
    REDACTION = "***"
    FORMAT = "[HOLBERTON] %(name)s %(levelname)s %(asctime)-15s: %(message)s"
    SEPARATOR = ";"

    def __init__(self, fields: List[str]):
        super(RedactingFormatter, self).__init__(self.FORMAT)
        self.fields = fields

    def format(self, record: logging.LogRecord) -> str:
        """mtd to filter values in incoming log records using filter_datum"""
        message = super(RedactingFormatter, self).format(record)
        redacting = filter_datum(self.fields, self.REDACTION,
                                 message, self.SEPARATOR)
        return redacting
    
    def get_logger() -> logging.Logger:
        """
        function that takes no arguments
        and returns a logging.Logger object
        """
        logger = logging.getLogger("user_data")
        logger.setLevel(logging.INFO)
        logger.propagate = False # not to propogate

        # creating a streamhandler to be able to store in file we want
        stream_handler = logging.StreamHandler()
        
        # create and set the formatter
        formatter = RedactingFormatter(fields=PII_FIELDS)
        stream_handler.setFormatter(formatter)

        # add the handler to the logger
        logger.addHandler(stream_handler)
        return logger
